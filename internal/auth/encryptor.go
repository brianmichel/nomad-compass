package auth

import (
	"crypto/rand"
	"fmt"

	"golang.org/x/crypto/nacl/secretbox"
)

// Encryptor provides symmetric encryption for sensitive values.
type Encryptor struct {
	key [32]byte
}

// NewEncryptor constructs an Encryptor using a 32-byte key.
func NewEncryptor(key []byte) (*Encryptor, error) {
	if len(key) != 32 {
		return nil, fmt.Errorf("encryption key must be 32 bytes")
	}
	e := &Encryptor{}
	copy(e.key[:], key)
	return e, nil
}

// Encrypt seals the provided plaintext and returns nonce+ciphertext byte slice.
func (e *Encryptor) Encrypt(plaintext []byte) ([]byte, error) {
	var nonce [24]byte
	if _, err := rand.Read(nonce[:]); err != nil {
		return nil, fmt.Errorf("generate nonce: %w", err)
	}
	out := secretbox.Seal(nonce[:], plaintext, &nonce, &e.key)
	return out, nil
}

// Decrypt opens bytes generated by Encrypt and returns the plaintext.
func (e *Encryptor) Decrypt(data []byte) ([]byte, error) {
	if len(data) < 24 {
		return nil, fmt.Errorf("ciphertext too short")
	}
	var nonce [24]byte
	copy(nonce[:], data[:24])
	decrypted, ok := secretbox.Open(nil, data[24:], &nonce, &e.key)
	if !ok {
		return nil, fmt.Errorf("unable to decrypt data")
	}
	return decrypted, nil
}
